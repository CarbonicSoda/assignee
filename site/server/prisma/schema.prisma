generator client {
  provider = "prisma-client"
  output   = "../src/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:../src/app.db"
}

model User {
  uid Int @id @default(autoincrement())

  mail String @unique
  name String

  created DateTime @default(now())
  updated DateTime @updatedAt

  Pass   Pass?
  Sess   Sess[]
  Member Member[]
  Work   Work[]
}

model Pass {
  uid Int @id

  hash Bytes
  salt Bytes

  created DateTime @default(now())
  updated DateTime @updatedAt

  User User @relation(fields: [uid], references: [uid], onUpdate: Restrict, onDelete: Cascade)
}

model Sess {
  sid Int @id @default(autoincrement())
  uid Int

  hash Bytes
  salt Bytes

  created DateTime @default(now())
  updated DateTime @updatedAt

  User User @relation(fields: [uid], references: [uid], onUpdate: Restrict, onDelete: Cascade)

  @@index([uid])
}

model Team {
  tid Int @id @default(autoincrement())

  name String
  desc String

  created DateTime @default(now())
  updated DateTime @updatedAt

  Invite Invite?
  Member Member[]
  Task   Task[]
}

model Invite {
  tid Int @id

  code Bytes @unique

  created DateTime @default(now())
  updated DateTime @updatedAt

  Team Team @relation(fields: [tid], references: [tid], onUpdate: Restrict, onDelete: Cascade)
}

model Member {
  uid Int
  tid Int

  auth Boolean

  created DateTime @default(now())
  updated DateTime @updatedAt

  User User @relation(fields: [uid], references: [uid], onUpdate: Restrict, onDelete: Cascade)
  Team Team @relation(fields: [tid], references: [tid], onUpdate: Restrict, onDelete: Cascade)

  @@id([uid, tid], name: "pk")
  @@index([tid])
}

model Task {
  aid Int @id @default(autoincrement())
  tid Int

  name String
  desc String
  dead DateTime

  created DateTime @default(now())
  updated DateTime @updatedAt

  Team     Team      @relation(fields: [tid], references: [tid], onUpdate: Restrict, onDelete: Cascade)
  TaskFile TaskFile?
  Work     Work[]

  @@index([tid])
}

model TaskFile {
  aid Int @id

  name String
  mime String
  blob Bytes

  created DateTime @default(now())
  updated DateTime @updatedAt

  Task Task @relation(fields: [aid], references: [aid], onUpdate: Restrict, onDelete: Cascade)
}

model Work {
  sid Int @id @default(autoincrement())
  uid Int
  aid Int

  done Boolean @default(false)
  comm String?

  created DateTime @default(now())
  updated DateTime @updatedAt

  User     User      @relation(fields: [uid], references: [uid], onUpdate: Restrict, onDelete: Cascade)
  Task     Task      @relation(fields: [aid], references: [aid], onUpdate: Restrict, onDelete: Cascade)
  WorkFile WorkFile?

  @@unique([uid, aid], name: "uq")
  @@index([aid])
}

model WorkFile {
  sid Int @id

  name String
  mime String
  blob Bytes

  created DateTime @default(now())
  updated DateTime @updatedAt

  Work Work @relation(fields: [sid], references: [sid], onUpdate: Restrict, onDelete: Cascade)
}
